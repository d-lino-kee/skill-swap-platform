import express from 'express';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import mysql from 'mysql';
import config from './config.js';
import bodyParser from 'body-parser';
import cors from 'cors';
import dotenv from 'dotenv';
import { WebSocketServer } from 'ws';
import http from 'http';
dotenv.config();

// Initialize express app
const app = express();
const server = http.createServer(app);

// Initialize WebSocket server
const wss = new WebSocketServer({ server });

// Store connected clients
const clients = new Map();

wss.on('connection', (ws, req) => {
  const userId = req.url.split('=')[1]; // Get userId from URL
  if (userId) {
    clients.set(userId, ws);
  }

  ws.on('close', () => {
    clients.delete(userId);
  });
});

// Function to send notification to a specific user
const sendNotification = (userId, notification) => {
  const client = clients.get(userId.toString());
  if (client) {
    client.send(JSON.stringify(notification));
  }
};

// Enable CORS for all origins
app.use(cors());

// Middleware to parse JSON and urlencoded data
app.use(bodyParser.json({ limit: '50mb' }));
app.use(bodyParser.urlencoded({ limit: '50mb', extended: true }));

// MySQL database connection
const dbConfig = { ...config };
delete dbConfig.database; // Remove database from initial connection
const initialDb = mysql.createConnection(dbConfig);

initialDb.connect((err) => {
  if (err) {
    console.error('Error connecting to MySQL:', err.stack);
    return;
  }
  console.log('Connected to MySQL server');

  // Create database if it doesn't exist
  initialDb.query(`CREATE DATABASE IF NOT EXISTS ${config.database}`, (err) => {
    if (err) {
      console.error('Error creating database:', err);
      return;
    }
    console.log('Database checked/created');

    // Close initial connection
    initialDb.end();

    // Connect to the specific database
    const db = mysql.createConnection(config);

    db.connect((err) => {
      if (err) {
        console.error('Error connecting to the database:', err.stack);
        return;
      }
      console.log('Connected to the MySQL database');

      // Create tables if they don't exist
      const createTables = `
        CREATE TABLE IF NOT EXISTS users (
          id INT AUTO_INCREMENT PRIMARY KEY,
          name VARCHAR(255),
          skill VARCHAR(255),
          location VARCHAR(255),
          time_availability VARCHAR(255),
          years_of_experience INT,
          email VARCHAR(255) UNIQUE,
          password VARCHAR(255)
        );

        CREATE TABLE IF NOT EXISTS profiles (
          id INT AUTO_INCREMENT PRIMARY KEY,
          user_id INT,
          first_name VARCHAR(100),
          last_name VARCHAR(100),
          bio TEXT,
          FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
        );

        CREATE TABLE IF NOT EXISTS request (
          id INTEGER PRIMARY KEY AUTO_INCREMENT,
          send_request_user_id INTEGER NOT NULL,
          receive_request_user_id INTEGER NOT NULL,
          request_state ENUM('pending', 'accepted', 'rejected') NOT NULL DEFAULT 'pending',
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
          FOREIGN KEY (send_request_user_id) REFERENCES users(id) ON DELETE CASCADE,
          FOREIGN KEY (receive_request_user_id) REFERENCES users(id) ON DELETE CASCADE
        );

        CREATE TABLE IF NOT EXISTS matches (
          id INTEGER PRIMARY KEY AUTO_INCREMENT,
          user1_id INTEGER NOT NULL,
          user2_id INTEGER NOT NULL,
          confirmed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (user1_id) REFERENCES users(id) ON DELETE CASCADE,
          FOREIGN KEY (user2_id) REFERENCES users(id) ON DELETE CASCADE
        );
      `;

      db.query(createTables, (err) => {
        if (err) {
          console.error('Error creating tables:', err);
          return;
        }
        console.log('Tables checked/created');
      });
    });
  });
});

// Initialize router
const router = express.Router();

// Route to handle user signup
router.post('/api/users/signup', async (req, res) => {
  const { name, skill, location, time_availability, years_of_experience, email, password } = req.body;

  if (!name || !email || !password) {
    return res.status(400).json({ success: false, message: 'Please provide all required fields' });
  }

  // Check if the email already exists
  db.query('SELECT * FROM users WHERE email = ?', [email], async (err, result) => {
    if (err) return res.status(500).json({ success: false, message: 'Database error' });

    if (result.length > 0) {
      return res.status(400).json({ success: false, message: 'Email already registered' });
    }

    // Hash the password
    const hashedPassword = await bcrypt.hash(password, 10);

    // Insert new user into the database
    const query = 'INSERT INTO users (name, skill, location, time_availability, years_of_experience, email, password) VALUES (?, ?, ?, ?, ?, ?, ?)';
    db.query(query, [name, skill, location, time_availability, years_of_experience, email, hashedPassword], (err, result) => {
      if (err) return res.status(500).json({ success: false, message: 'Error registering user' });

      // Create JWT token
      const token = jwt.sign({ userId: result.insertId }, 'your_jwt_secret', { expiresIn: '1h' });

      res.status(201).json({ success: true, token });
    });
  });
});

// Route to handle user login
router.post('/api/auth/login', (req, res) => {
  const { email, password } = req.body;

  // Check if user exists
  const query = 'SELECT * FROM users WHERE email = ?';
  db.query(query, [email], (err, results) => {
    if (err) {
      return res.status(500).json({ message: 'Error checking user', error: err });
    }
    if (results.length === 0) {
      return res.status(400).json({ message: 'User not found' });
    }

    const user = results[0];

    // Compare password
    bcrypt.compare(password, user.password, (err, isMatch) => {
      if (err) {
        return res.status(500).json({ message: 'Error comparing password', error: err });
      }
      if (!isMatch) {
        return res.status(400).json({ message: 'Invalid credentials' });
      }

      // Generate JWT token
      const token = jwt.sign({ userId: user.id, name: user.name }, process.env.JWT_SECRET, { expiresIn: '1h' });
      res.status(200).json({ message: 'Login successful', token });
    });
  });
});

// Route to fetch user profile by ID
app.get('/api/user/:id', (req, res) => {
	const userId = req.params.id;
	const query = 'SELECT id, name, skill, location, time_availability, years_of_experience, email FROM users WHERE id = ?';
  
	db.query(query, [userId], (err, results) => {
	  if (err) {
		return res.status(500).send('Error fetching user data');
	  }
	  if (results.length > 0) {
		res.json(results[0]);
	  } else {
		res.status(404).send('User not found');
	  }
	});
  });

// Fetch matches for a user
app.get('/api/matches/:userId', async (req, res) => {
  const { userId } = req.params;

  try {
    const query = 'SELECT * FROM matches WHERE (user1_id = ? OR user2_id = ?) AND status = "active"';
    db.query(query, [userId, userId], (err, matches) => {
      if (err) {
        console.error('Error fetching matches:', err);
        return res.status(500).json({ message: 'Internal server error.' });
      }

      res.status(200).json(matches);
    });
  } catch (error) {
    console.error('Error fetching matches:', error);
    res.status(500).json({ message: 'Internal server error.' });
  }
});

// Search users route
router.get('/api/users/search', (req, res) => {
  const { skill, time_availability } = req.query;

  let query = 'SELECT * FROM users WHERE 1=1';
  let params = [];

  if (skill) {
    query += ' AND skill LIKE ?';
    params.push(`%${skill}%`);
  }
  if (time_availability) {
    query += ' AND time_availability LIKE ?';
    params.push(`%${time_availability}%`);
  }

  db.query(query, params, (err, results) => {
    if (err) {
      console.error('Error fetching users:', err);
      return res.status(500).json({ message: 'Error fetching users' });
    }

    res.json(results); // Return matching users
  });
});

  

// Route to handle user profile update
router.put('/api/users/update/:id', async (req, res) => {
	const userId = req.params.id;
	const { name, skill, location, time_availability, years_of_experience, email, password } = req.body;
  
	// Validate that at least one field is provided
	if (
	  !name &&
	  !skill &&
	  !location &&
	  !time_availability &&
	  !years_of_experience &&
	  !email &&
	  !password
	) {
	  return res.status(400).json({ success: false, message: 'No fields to update' });
	}
  
	// Prepare the update query dynamically based on provided fields
	let query = 'UPDATE users SET';
	let params = [];
  
	// Conditionally add fields to the update query
	if (name) {
	  query += ' name = ?,';
	  params.push(name);
	}
	if (skill) {
	  query += ' skill = ?,';
	  params.push(skill);
	}
	if (location) {
	  query += ' location = ?,';
	  params.push(location);
	}
	if (time_availability) {
	  query += ' time_availability = ?,';
	  params.push(time_availability);
	}
	if (years_of_experience) {
	  query += ' years_of_experience = ?,';
	  params.push(years_of_experience);
	}
	if (email) {
	  query += ' email = ?,';
	  params.push(email);
	}
	if (password) {
	  // Only hash the password if it's provided
	  const hashedPassword = await bcrypt.hash(password, 10);
	  query += ' password = ?,';
	  params.push(hashedPassword);
	}
  
	// Remove the trailing comma and add the WHERE clause
	query = query.slice(0, -1);
	query += ' WHERE id = ?';
	params.push(userId);
  
	// Execute the update query
	db.query(query, params, (err, result) => {
	  if (err) {
		console.error('Error updating user profile:', err);
		return res.status(500).json({ success: false, message: 'Error updating user profile' });
	  }
  
	  if (result.affectedRows > 0) {
		res.json({ success: true, message: 'Profile updated successfully' });
	  } else {
		res.status(404).json({ success: false, message: 'User not found' });
	  }
	});
  });
  

// Send a skill swap request
router.post('/api/requests', (req, res) => {
  const { send_request_user_id, receive_request_user_id } = req.body;

  const query = 'INSERT INTO request (send_request_user_id, receive_request_user_id) VALUES (?, ?)';
  db.query(query, [send_request_user_id, receive_request_user_id], (err, result) => {
    if (err) {
      console.error('Error creating request:', err);
      return res.status(500).json({ success: false, message: 'Error creating request' });
    }

    // Send real-time notification to receiver
    sendNotification(receive_request_user_id, {
      type: 'new_request',
      message: 'You have received a new skill swap request!'
    });

    res.status(201).json({ success: true, requestId: result.insertId });
  });
});

// Get pending requests for a user
router.get('/api/requests/:userId', (req, res) => {
  const userId = req.params.userId;
  
  const query = `
    SELECT r.*, 
           u1.name as sender_name, u1.email as sender_email,
           u2.name as receiver_name, u2.email as receiver_email
    FROM request r
    JOIN users u1 ON r.send_request_user_id = u1.id
    JOIN users u2 ON r.receive_request_user_id = u2.id
    WHERE (receive_request_user_id = ? OR send_request_user_id = ?)
  `;
  
  db.query(query, [userId, userId], (err, results) => {
    if (err) {
      console.error('Error fetching requests:', err);
      return res.status(500).json({ success: false, message: 'Error fetching requests' });
    }
    res.json(results);
  });
});

// Update request status (accept/reject)
router.put('/api/requests/:requestId', (req, res) => {
  const { requestId } = req.params;
  const { request_state } = req.body;

  db.query('UPDATE request SET request_state = ? WHERE id = ?', [request_state, requestId], (err, result) => {
    if (err) {
      console.error('Error updating request:', err);
      return res.status(500).json({ success: false, message: 'Error updating request' });
    }

    // Get request details to send notification
    db.query('SELECT * FROM request WHERE id = ?', [requestId], (err, requests) => {
      if (!err && requests.length > 0) {
        const request = requests[0];
        // Send notification to the sender
        sendNotification(request.send_request_user_id, {
          type: 'request_' + request_state,
          message: `Your skill swap request has been ${request_state}!`
        });
      }

      if (request_state === 'accepted') {
        // Get the request details to create a match
        db.query('SELECT * FROM request WHERE id = ?', [requestId], (err, requests) => {
          if (err || requests.length === 0) {
            return res.status(500).json({ success: false, message: 'Error creating match' });
          }

          const request = requests[0];
          // Create a new match
          const matchQuery = 'INSERT INTO matches (user1_id, user2_id) VALUES (?, ?)';
          db.query(matchQuery, [request.send_request_user_id, request.receive_request_user_id], (err, matchResult) => {
            if (err) {
              console.error('Error creating match:', err);
              return res.status(500).json({ success: false, message: 'Error creating match' });
            }
            res.json({ 
              success: true, 
              message: 'Request accepted and match created',
              matchId: matchResult.insertId 
            });
          });
        });
      }
      
      res.json({ success: true, message: 'Request updated successfully' });
    });
  });
});

// Get matches with user details
router.get('/api/matches/:userId', (req, res) => {
  const userId = req.params.userId;
  
  const query = `
    SELECT m.*, 
           u1.name as user1_name, u1.email as user1_email,
           u2.name as user2_name, u2.email as user2_email
    FROM matches m
    JOIN users u1 ON m.user1_id = u1.id
    JOIN users u2 ON m.user2_id = u2.id
    WHERE user1_id = ? OR user2_id = ?
  `;
  
  db.query(query, [userId, userId], (err, results) => {
    if (err) {
      console.error('Error fetching matches:', err);
      return res.status(500).json({ success: false, message: 'Error fetching matches' });
    }
    res.json(results);
  });
});

// Delete a skill swap request
router.delete('/api/requests/:requestId', (req, res) => {
  const { requestId } = req.params;

  // Only allow deletion of pending requests
  const query = 'DELETE FROM request WHERE id = ? AND request_state = "pending"';
  db.query(query, [requestId], (err, result) => {
    if (err) {
      console.error('Error deleting request:', err);
      return res.status(500).json({ success: false, message: 'Error deleting request' });
    }

    if (result.affectedRows === 0) {
      return res.status(400).json({ 
        success: false, 
        message: 'Request not found or cannot be withdrawn (already accepted/rejected)' 
      });
    }

    res.json({ success: true, message: 'Request withdrawn successfully' });
  });

// Use the router
app.use(router);

// Start the server
const port = process.env.PORT || 5000;
server.listen(port, () => console.log(`Server running on http://localhost:${port}`));